---
title: "Class06: Functions"
author: "Juan Manuel (PID: A69034758)"
format: gfm
---

The first function we write
```{r}
add <- function(x,y){
  x +y
}
```

Can we use it? 
```{r}
add(1,1)
add(x=1,y=100)
add(c(100,1,100),1)
```

If you wanna define a default value, such as y=1, then we can omit the y value on the function. 
```{r}
add2 <- function(x,y=1){
  x +y
}
```


```{r}
add2(10)
```

#A second function
Q1. Make a function "generate_DNA()" that makes a random nucleotides seq of any lenght
```{r}
bases <- c("A","C","G","T")

sample(bases, size = 50, replace=TRUE)
```
The last one is out wee working snipet. 
Now let's try make it into a function. 

```{r}
generate_DNA <- function(length){
  bases <- c("A","C","G","T")
  sequence <- sample(bases, size = length, 
         replace=TRUE)
  return(sequence)
  }
```

```{r}
generate_DNA(10)
```

After installing the package bio3d, we can access the table of aa
```{r}
bio3d::aa.table$aa1
```
To make it unique: 
```{r}
aa <- unique(bio3d::aa.table$aa1)[1:20]
aa
```
Then we can write a function that generates proteins

```{r}
generate_protein <- function(length){
  aa
  aachain <- sample(aa, size = length, 
         replace=TRUE)
  aachain <- paste(aachain, collapse="") #we added the paste function in order to eliminate the spaces and "". 
  return(aachain)
  }
```

```{r}
generate_protein(10)
```

Q. Generate random protein sequences of length 6 to 13. 
```{r}
generate_protein(6)
generate_protein(7)
generate_protein(8)
generate_protein(9)
generate_protein(10)
generate_protein(11)
generate_protein(12)
generate_protein(13)
```
Then to write it shorter 
```{r}
for (x in 6:13)
print(generate_protein(x))
```

In class strategy: 
```{r}
X <- c(6:13)
answer <- sapply(X, generate_protein)
```

To get the fasta format, we can just add the headed to each sequence that we generated. 
```{r}
cat( paste(">id.",6:13, "\n", answer, sep=""), sep="\n")
```

